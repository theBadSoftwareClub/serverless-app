AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  A Serverless Application

Parameters:
  RootDomain:
    Type: String
    Default: "thebadsoftwareclub.net"

  RootCertificateArn:
    Type: String
    Default: "arn:aws:acm:us-east-1:822675929081:certificate/16199f7e-0c14-47a7-b348-2e294738b3ba"

  RootHostedZone:
    Type: AWS::Route53::HostedZone::Id
    Default: Z0608589Z32H3ZBSW3HW

  CfHostedZone:
    Type: AWS::Route53::HostedZone::Id
    Default: Z2FDTNDATAQYW2

  AuthDomain:
    Type: String
    Default: !Sub
      - "mtnauth.${Domain}"
      - Domain: !Ref RootDomain
  ApiDomain:
    Type: String
    Default: !Sub
      - "mtnapi.${Domain}"
      - Domain: !Ref RootDomain
  AppDomain:
    Type: String
    Default: !Sub
      - "mtnapp.${Domain}"
      - Domain: !Ref RootDomain
  MtnAppUrl:
    Type: String
    Default: !Sub
      - "https://.${Domain}"
      - Domain: !Ref AppDomain
  MtnApiUrl:
    Type: String
    Default: !Sub
      - "https://.${Domain}"
      - Domain: !Ref ApiDomain

Resources:

  # The Cognito User Pool, Client, and Domain are for the Authentication Service
  MtnUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: mtnusers
      AutoVerifiedAttributes:
        - email
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false

  MtnUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref MtnUserPool
      ClientName: MtnUserPoolClient
      GenerateSecret: false
      AllowedOAuthFlows:
        - implicit
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - openid
        - email
        - profile
      CallbackURLs:
        - !Ref MtnAppUrl
      ExplicitAuthFlows:
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_CUSTOM_AUTH
      SupportedIdentityProviders:
        - COGNITO

  MtnUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref MtnUserPool
      Domain: !Ref mtnAuthDomain
      CustomDomainConfig:
        CertificateArn: !Ref RootCertificateArn

        #   ... creating the record set for the cognito auth url is still pending an  outstanding issue and requires a
        #  workaround not included in this example: https://github.com/aws-cloudformation/cloudformation-coverage-roadmap/issues/241

  # The Data Bucket is for Object Storage
  MtnDataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: mtnapp-data-store

  # DynamoDB Tables are for key-value data (application indexes)
  MtnPlansTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: mtnplans
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: createdBy
          AttributeType: S
        - AttributeName: planId
          AttributeType: S
      KeySchema:
        - AttributeName: planId
          KeyType: HASH
        - AttributeName: createdBy
          KeyType: RANGE

  MtnRunsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: mtnruns
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: planId
          AttributeType: S
        - AttributeName: runId
          AttributeType: S
      KeySchema:
        - AttributeName: planId
          KeyType: HASH
        - AttributeName: runId
          KeyType: RANGE

  # The Api and Lambda Functions make up the server-side functionality
  MtnApi:
    Type: AWS::Serverless::Api
    Properties:
      Domain:
        DomainName: !Ref MtnApiDomain
        CertificateArn: !Ref RootCertificateArn
        EndpointConfiguration: EDGE
        Route53:
          HostedZoneId: !Ref RootHostedZone

      Auth:
        Authorizers:
          exampleAuth:
            AuthorizationScopes:
              - email
              - openid
            UserPoolArn: !GetAtt ExampleUserPool.Arn
            Identity:
              Header: Authorization
      StageName: Prod
      DefinitionBody:
        openapi: "3.0.1"
        info:
          title: "MtnApi"
          version: "1.0"
        servers:
          - url: !Ref MtnApiUrl
        paths:
          /:
            get:
              parameters:
                - name: "Access-Control-Allow-Origin"
                  in: "header"
                  schema:
                    type: "string"
              responses:
                "404":
                  description: "404 response"
                  content: { }
                "500":
                  description: "500 response"
                  content: { }
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Allow-Credentials:
                      schema:
                        type: "string"
                    Access-Control-Allow-Headers:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              security:
                - exampleAuth: [ ]
              x-amazon-apigateway-integration:
                responses:
                  "5\\d{2}":
                    statusCode: "500"
                  "2\\d{2}":
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "{\r\n    \"statusCode\": 200,\r\n    \"message\"\
                                    : \"API Response\"\r\n}"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_templates"
                type: "mock"
            options:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Allow-Credentials:
                      schema:
                        type: "string"
                    Access-Control-Allow-Headers:
                      schema:
                        type: "string"
                  content: { }
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /items:
            get:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              security:
                - exampleAuth: [ ]
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:822675929081:function:itemsFn/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
            post:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              security:
                - exampleAuth: [ ]
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:822675929081:function:itemsFn/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
            options:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Allow-Headers:
                      schema:
                        type: "string"
                  content: { }
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "{}\n"
                requestTemplates:
                  application/json: "{\n  \"statusCode\" : 200\n}\n"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /items/createdBy:
            get:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              security:
                - exampleAuth: [ ]
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:822675929081:function:itemsFn/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
            options:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Allow-Headers:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /items/{itemId+}:
            get:
              parameters:
                - name: "itemId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              security:
                - exampleAuth: [ ]
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:822675929081:function:itemsFn/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_match"
                cacheNamespace: "15yjo6"
                cacheKeyParameters:
                  - "method.request.path.itemId"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
            put:
              parameters:
                - name: "itemId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              security:
                - exampleAuth: [ ]
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:822675929081:function:itemsFn/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_match"
                cacheNamespace: "15yjo6"
                cacheKeyParameters:
                  - "method.request.path.itemId"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
            delete:
              parameters:
                - name: "itemId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              security:
                - exampleAuth: [ ]
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:822675929081:function:itemsFn/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_match"
                cacheNamespace: "15yjo6"
                cacheKeyParameters:
                  - "method.request.path.itemId"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
            options:
              parameters:
                - name: "itemId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Allow-Headers:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
            x-amazon-apigateway-any-method:
              parameters:
                - name: "itemId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
              responses:
                "200":
                  description: "200 response"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              x-amazon-apigateway-integration:
                httpMethod: "ANY"
                uri: "https://exampleapp.thebadsoftwareclub.net/items/{itemId}"
                responses:
                  default:
                    statusCode: "200"
                requestParameters:
                  integration.request.path.planId: "method.request.path.itemId"
                passthroughBehavior: "when_no_match"
                cacheNamespace: "15yjo6"
                cacheKeyParameters:
                  - "method.request.path.itemId"
                type: "http_proxy"

  MtnPlansFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: plansFn
      Role: !GetAtt plansRole.Arn
      Handler: lambda_function.lambda_handler
      Runtime: python3.7
      CodeUri: functions/plans/
      Description: >-
        plans
      MemorySize: 512
      Timeout: 10
      Layers:
        - arn:aws:lambda:us-west-2:822675929081:layer:dependencies:3
      Events:
        PlansEvent:
          Type: Api
          Properties:
            Path: '/plans'
            Method: get
            RestApiId:
              Ref: MtnApi
        CreatedByEvent:
          Type: Api
          Properties:
            Path: '/plans/createdBy'
            Method: get
            RestApiId:
              Ref: MtnApi
        NewPlanEvent:
          Type: Api
          Properties:
            Path: '/plans'
            Method: post
            RestApiId:
              Ref: MtnApi
        GetPlanEvent:
          Type: Api
          Properties:
            Path: '/plans/{planId+}'
            Method: get
            RestApiId:
              Ref: ExampleApi
        UpdatePlanEvent:
          Type: Api
          Properties:
            Path: '/plans/{planId+}'
            Method: put
            RestApiId:
              Ref: MtnApi
        DeletePlanEvent:
          Type: Api
          Properties:
            Path: '/plans/{planId+}'
            Method: delete
            RestApiId:
              Ref: MtnApi

  # ... with a log-group is for server-side logs
  MtnPlansLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${MtnPlansFn}"
      RetentionInDays: 30

  # ... and permissions for the Lambdas...
  MtnPlansRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole

  MtnLogGroupPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "allow-lambda-logging"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:DescribeLogStreams
              - logs:PutLogEvents
            Resource:
              - "arn:aws:logs:*:822675929081:log-group:/aws/lambda/MtnPlansFn"
              - "arn:aws:logs:*:822675929081:log-group:/aws/lambda/MtnPlansFn:log-stream:*"
              - "arn:aws:logs:*:822675929081:log-group:/aws/lambda/MtnRunsFn"
              - "arn:aws:logs:*:822675929081:log-group:/aws/lambda/MtnRunsFn:log-stream:*"
      Roles:
        - !Ref MtnPlansRole

  MtnDynamoDBPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "allow-dynamoDB-access"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
              - dynamodb:ConditionCheckItem
              - dynamodb:PutItem
              - dynamodb:DeleteItem
              - dynamodb:DescribeContributorInsights
              - dynamodb:Scan
              - dynamodb:ListTagsOfResource
              - dynamodb:Query
              - dynamodb:DescribeStream
              - dynamodb:UpdateItem
              - dynamodb:DescribeTimeToLive
              - dynamodb:PartiQLSelect
              - dynamodb:DescribeTable
              - dynamodb:GetShardIterator
              - dynamodb:GetItem
              - dynamodb:DescribeContinuousBackups
              - dynamodb:DescribeKinesisStreamingDestination
              - dynamodb:GetRecords
              - dynamodb:DescribeTableReplicaAutoScaling
            Resource:
              - "arn:aws:dynamodb:us-west-2:822675929081:table/items"
              - "arn:aws:dynamodb:*:822675929081:table/items/stream/*"
      Roles:
        - !Ref MtnPlansRole

  MtnS3DataStorePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "allow-datastore-access"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetObject
              - s3:ListBucket
              - s3:DeleteObject
            Resource:
              - "arn:aws:s3:::mtnapp-data-store/*"
              - "arn:aws:s3:::mtnapp-data-store"
      Roles:
        - !Ref MtnPlansRole
        -


        # A CloudFront Distribution serves the client app, which depends on a URL, Bucket, and Policy

  # The Client-side app is hoisted with a CloudFront Distribution.
  MtnAppDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: 'Cloudfront distribution for client App'
        Aliases:
          - !Ref MtnAppDomain
        DefaultCacheBehavior:
          AllowedMethods:
            - HEAD
            - GET
            - OPTIONS
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
          Compress: true
          SmoothStreaming: false
          TargetOriginId: mtnapp-client-app
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        Logging:
          Bucket: ''
          IncludeCookies: false
          Prefix: ''
        Origins:
          - ConnectionAttempts: 3
            ConnectionTimeout: 10
            DomainName: !GetAtt ExampleClientAppBucket.DomainName
            Id: mtnapp-client-app
            OriginPath: ''
            OriginShield:
              Enabled: false
            S3OriginConfig:
              OriginAccessIdentity:
                Fn::Sub: 'origin-access-identity/cloudfront/${MtnCloudFrontOriginAccessIdentity}'
        PriceClass: PriceClass_All
        ViewerCertificate:
          AcmCertificateArn: !Ref RootCertificateArn
          SslSupportMethod: sni-only
        WebACLId: ''


  # ... which depends on having a bucket for staging, a URL, and a Policy
  MtnAppClientURL:
    Type: 'AWS::Route53::RecordSetGroup'
    Properties:
      HostedZoneId: !Ref RootHostedZone
      RecordSets:
        - Name: !Ref MtnAppDomain
          Type: A
          AliasTarget:
            HostedZoneId: !Ref CfHostedZone
            DNSName: !GetAtt
              - ExampleAppDistribution
              - DomainName

  MtnClientAppBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref MtnAppDomain

  MtnClientAppBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ExampleClientAppBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: 's3:GetObject'
            Resource:
              - !Sub "arn:aws:s3:::${MtnClientAppBucket}/*"
            Principal:
              AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${MtnCloudFrontOriginAccessIdentity}"

    MtnCloudFrontOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: 'Serverless website OA'







